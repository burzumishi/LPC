NAME
	debug - get info on gamedriver status

SYNOPSIS
	mixed debug(string arg, void|mixed param)

DESCRIPTION

	This efun can only be called by the master object.
	It takes care of all sorts of special jobs that do not warrant
	an efun of their own. Please note that the selection of arguments
	that can be passed to this function may change at any time at the
	convenience of the gamedriver developers. They are not considered
	part of the true mudlib interface of the gamedriver.

	Argument is one of the following:

	index
		show an index of all available arguments
	malloc
		show memory usage
	status
		display important system information
	status tables
		display more details about system status
	mudstatus
		accepts the parameters "on" and "off"
		"on" starts logging of interesting information to
		the file /Mudstatistics.
		"off" turns logging off.
	functionlist
		accepts an object parameter. Returns an array of strings
		containing all functions defined in the file corresponding
		to the object filename. Please note that inherited
		functions are not listed.
	rusage
		return a string containing the current rusage information.
		the values returned are 
		(listed here to save you a souce lookup):
            sprintf(buff, "%ld %ld %d %d %d %d %d %d %d %d %d %d %d %d %d %d",
		utime, stime, maxrss, rus.ru_ixrss, rus.ru_idrss,
		rus.ru_isrss, rus.ru_minflt, rus.ru_majflt, rus.ru_nswap,
		rus.ru_inblock, rus.ru_oublock, rus.ru_msgsnd, 
		rus.ru_msgrcv, rus.ru_nsignals, rus.ru_nvcsw, 
		rus.ru_nivcsw);
	top_ten_cpu
		returns an array containing strings with the cpu consumptions
		and names of the 10 most cpu intensive objects since last
		reboot
	object_cpu
		accepts an object parameter. Returns cpu usage of object
		since last reboot. 
	swap
		accepts an object parameter. Forces the object to be swapped.
	version
		returns a string with the version number of the gamedriver.
	wizlist
		OBSOLETE
	trace

		Sets the trace flags and returns the old trace flags.
		When tracing is on a lot of information is printed during 
		execution.

		The trace bits are
		1     Trace all function calls to lfuns.

		2     Trace all calls to "call_other".

		4     Trace all function returns.

		8     Print arguments at function calls and return values.

		16    Print all executed stack machine instructions
		      (produces a lot of output!).

		32    Enable trace in heart beat functions.

		64    Trace calls to apply.

		128   Show object name in tracing.



	traceprefix <object path>
		string traceprefix(string prefix)

		If the the traceprefix is set (i.e. not 0) 
		tracing will only occur in objects
		having a name with the set prefix.

	call_out_info
		returns an array of info about pending call_outs
	inherit_list
		takes an object parameter. Returns an array of strings
		with the names of all objects in the inherit chain of
		the parameter object.
	load_average
		returns a string showing how many commands that are 
		executed per second and how many lines of code that are 
		compiled per second

	shutdown
		shut down the game immediately

	object_info
		takes 2 parameters, the first one an integer 0 or 1, the
		second one an object. Returns a string of gamedriver 
		information about the object. If the first parameter is 0,
		you get the object flags, pointers. If the parameter is 1,
		program information is returned.
	function_map
		OBSOLETE
	send_udp
		takes 3 parameters, host, port and message. The message will
		be sent to the port on the host by the udp protocol.
	mud_port
		returns the port the mud is available at.
	udp_port
		returns the port that the mud is using for udp traffic.
	set_wizard
		OBSOLETE
	ob_flags
		takes an object parameter. Returns an integer containing the
		object flag word.
	get_variables
		takes an object parameter, and optionally an extra string
		parameter. Returns a mixed array containing all the variables
		of the object, unless the string argument is specified. In the
		latter case, only the variable specified in the string
		parameter is returned.
	get_eval_cost
		returns the current value of the eval_cost counter.
	debug malloc
		If the game is compiled with the debug malloc option, this
		will start the dumping of the debug information.
	getprofile
		takes an object parameter. Returns a string showing the
		evaluation costs of each function in the object.
	get_avg_response
		returns the average response time.
	destruct
		takes an object parameter. It destructs the object.
	destroy
		takes an object parameter. It destructs the object.
	update snoops
		Updates the global snoops by reading in the snoop definition 
		file.
	call_warnings
		accepts the parameters "on" and "off"
		"on" starts the logging of warnings for failed function calls.
		The information is sent to stdout (which then probably is
		redirected to a file, eg /lplog). 
	dump_objects
		sends a list of all existing objects to the file /OBJECT_DUMP.


